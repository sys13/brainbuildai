import { PassThrough } from 'node:stream'
import PDFDocument from 'pdfkit'
import { promiseHash } from 'remix-utils/promise'
import { bbai } from './bbai/bbai'
import { db } from './db.server'
import { invariantResponse } from './misc'

const TITLE_SIZE = 32
const HEADER_SIZE = 25

export default async function generateProjectPDF({
	// domainUrl,
	prdId,
	tenantId,
}: {
	domainUrl: string
	prdId: string
	tenantId: string
}) {
	const doc = new PDFDocument()
	const stream = new PassThrough()
	doc.pipe(stream)

	const data = await promiseHash({
		persona: db.query.persona.findMany({
			where: {
				// prdId,
				tenantId,
				isAccepted: true,
			},
		}),
		project: db.query.prd.findFirst({
			where: {
				id: prdId,
				tenantId,
			},
		}),
	})

	invariantResponse(data.project, 'Project not found')

	doc.fontSize(18).fillAndStroke('#636262').text('PROJECT SUMMARY', {})
	doc.fontSize(TITLE_SIZE).fillAndStroke('black').text(data.project.name)
	// doc.fontSize(14).text(`Date: ${format(new Date(), 'MMM dd, yyyy')}`)

	doc
		.fontSize(16)
		.moveDown()
		.fillAndStroke('#636262')
		.text('This document was generated by ', { continued: true })
	doc.text(bbai.marketing.name, {
		link: bbai.websiteDomain,
		underline: true,
	})
	doc
		.text('BrainBuildAI helps you design products that people love')
		.moveDown(2)

	createSection({
		description: 'The types of people who will use the product',
		doc,
		items: data.persona.map(({ name }) => name),
		title: 'Personas',
	})

	doc.addPage()

	// const browser = await puppeteer.launch({
	// 	args: [
	// 		'--no-sandbox',
	// 		'--disable-setuid-sandbox',
	// 		'--disable-gpu',
	// 		'--disable-software-rasterizer',
	// 	],
	// 	executablePath:
	// 		process.env.NODE_ENV !== 'development' ? '/usr/bin/chromium' : undefined,
	// 	//	@ts-expect-error - headless is not in the types
	// 	headless: 'new',
	// })
	// const page = await browser.newPage()
	// await page.setViewport({
	// 	deviceScaleFactor: 3, // iPhone 12 scale factor
	// 	hasTouch: true,
	// 	height: 844, // iPhone 12 height
	// 	isMobile: true,
	// 	width: 390, // iPhone 12 width
	// })

	// const pagesWithGenerated = data.pages.filter(
	// 	(page) => page.elementJSON !== null,
	// )

	// for (const [index, generatedPage] of pagesWithGenerated.entries()) {
	// 	await page.goto(
	// 		`${domainUrl}/page-exporter?tenantId=${tenantId}&prdId=${prdId}&pageId=${generatedPage.id}&s=${process.env.PAGE_EXPORTER_SECRET}`,
	// 	)
	// 	await page.waitForNetworkIdle()
	// 	await page.screenshot({ path: `screenshot-${generatedPage.id}.png` })
	// 	doc
	// 		.translate(150 * index + 10 * index, 0)
	// 		.image(`screenshot-${generatedPage.id}.png`, { width: 150 })
	// }

	doc.end()

	return stream
}

function createSection({
	description,
	doc,
	items,
	title,
}: {
	description: string
	doc: PDFKit.PDFDocument
	items: string[]
	title: string
}) {
	doc.fontSize(HEADER_SIZE).fillColor('black').text(title)
	doc.fontSize(16).fillColor('#636262').text(description)
	doc.moveDown().fillColor('black').list(items).moveDown(2)
}
